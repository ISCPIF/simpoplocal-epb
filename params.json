{"name":"Simpoplocal-epb","tagline":"","body":"\r\nThis project contains the source files to reproduce the results of experiments on the Simpop Local model. This experiment is described in the paper:\r\n\r\n  C. Schmitt, S. Rey,  R. Reuillon, D. Pumain, Half a billion simulations: Evolutionary algorithms and distributed computing for calibrating the SimpopLocal geographical model, submitted to EPB, under review, 2013.\r\n\r\nPage project website : http://iscpif.github.io/simpoplocal-epb/\r\n\r\nLicence\r\n-------\r\n\r\nThis software is licenced under the GNU Affero GPLv3 free software licence. \r\n\r\nUsage (simulation)\r\n------------------\r\n\r\nTo compile and run this project you need sbt 0.12 (http://www.scala-sbt.org/).\r\n\r\nGo to the fitness directory.\r\n\r\n`cd fitness`\r\n\r\nTo execute a single run: \r\n\r\n`sbt run`\r\n\r\nTo build and publish the OpenMoLE plugin:\r\n\r\n`sbt publish-local`\r\n\r\nGet the plugin in your local `~/.ivy2/` repository, for instance:\r\n\r\n`/home/reuillon/.ivy2/local/fr.geocite.simpoplocal/exploration_2.10/1.0.0/bundles/exploration_2.10.jar`\r\n\r\nWe use OpenMoLE to describe and launch our experimentation.\r\n\r\n> OpenMOLE (Open MOdeL Experiment) is a workflow engine designed to leverage the computing power of parallel execution environments for naturally parallel processes. A process is told naturally parallel if the same computation runs many times for a set of different inputs. OpenMOLE workflows are suitable for many types of naturally parallel processes such as model experiment, image processing, text analysis… It is distributed under the AGPLv3 free software license.\r\n\r\nDescription of OpenMoLE installation is described on www.openmole.org website.\r\n\r\nYou can find multiple other great tutorials and examples of other applications on same website.\r\n\r\nTo launch OpenMoLE in console mode and load the exploration jar : \r\n\r\n`openmole -c -p /path/to/exploration_2.10.jar`\r\n\r\nThen you can use the workflows avialable in the openmole directory (it is compatible with OpenMoLE 0.9). Those workflows are configured to run on the biomed VO of the grid EGI, however switching the execution environment in OpenMoLE is easy so you can use this workflow on you own multi-core machine, cluster or grid virtual organisation (you can find examples of workflows in the tutorial section on the openmole website).\r\n\r\nUsage (graphics)\r\n----------------\r\n\r\nYou can find graphics scripts into R folder. \r\nYou need R with `ggplot2` installed to run correctly this two scripts.\r\n\r\nGraphics use csv file generated by `WriteResultGraph1.scala` and `WriteResultGraph2.scala`\r\n\r\nIf you want to add more replication or change the default output for result in the graphic 1, you need to modify directly the two lines into scala file `WriteResultGraph1.scala` : \r\n\r\n```scala\r\n  val replications = 5\r\n  val folderPath = \"/tmp/\"\r\n```\r\n\r\nIf you want to add more replications, change the frequency of data writer, or change the default output for result in the graphic 2, you need to modify directly the two lines into scala file `WriteResultGraph2.scala` : \r\n\r\n```scala\r\n  val replications = 5\r\n  val folderPath = \"/tmp/\"\r\n  val each = 10\r\n```\r\n\r\nTo generate csv files, you need to `run sbt` and choose the correct option in the menu. After that, you can locate the csv file and modify into R folder the two `.sh` scripts :\r\n\r\nTo generate graphics 1 you need to modify the `graph1.sh` file  \r\n\r\nTo generate graphics 2 you need to modify the `graph2.sh` file  \r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}